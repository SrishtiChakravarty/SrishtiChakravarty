#include <iostream>
#include <bits/stdc++.h>

using namespace std;

struct Node{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int val){
        data= val;
        left=NULL;
        right=NULL;
    }
};


int height(Node* root){
    
    if(root==NULL){
        return 0;
    }
    
    int lh=height(root->left);
    int rh=height(root->right);
    
    return max(lh,rh)+1;
    
    
}


bool balancedbtree(Node* root){
    
    if(root==NULL){
        return true;
    }
    
    if(balancedbtree(root->left)==false){
        return false;
    }
    
    if(balancedbtree(root->right)==false){
        return false;
    }
    
    int lh=height(root->left);
    int rh=height(root->right);
    
    if(abs(lh-rh)==1){
        return true;
    }
    else{
      return false;
    }
    
}

int main() {
	struct Node* root = new Node(1);
	root->left=new Node(2);
	root->right=new Node(3);
	root->left->left=new Node(4);
	root->left->right=new Node(5);
	root->right->left= new Node(6);
	root->right->right=new Node(7);
	
	 
	 if(balancedbtree(root)==true){
	     cout<<"Balanced Tree"<<endl;
	 }
	 else{
	     cout<<"unbalanced tree"<<endl;
	 }

	
	return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

tc(o(n))

#include <iostream>
#include <bits/stdc++.h>

using namespace std;

struct Node{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int val){
        data= val;
        left=NULL;
        right=NULL;
    }
};


int height(Node* root){
    
    if(root==NULL){
        return 0;
    }
    
    int lh=height(root->left);
    int rh=height(root->right);
    
    return max(lh,rh)+1;
    
    
}


bool balancedbtree(Node* root){
    
    if(root==NULL){
        return true;
    }
    
    if(balancedbtree(root->left)==false){
        return false;
    }
    
    if(balancedbtree(root->right)==false){
        return false;
    }
    
    int lh=height(root->left);
    int rh=height(root->right);
    
    if(abs(lh-rh)==1){
        return true;
    }
    else{
      return false;
    }
    
}


bool optimizebalanced(Node* root, int* height){
    if(root==NULL){
        return true;
    }
    
    int lh=0, rh=0;
    if(optimizebalanced(root->left,&lh)==false){
        return false;
    }
    
    if(optimizebalanced(root->right,&rh)==false){
        return false;
    }
    
    *height=max(lh,rh)+1;
    if(abs(lh-rh)<=1){
        return true;
    }
    else{
        return false;
    }
}



int main() {
	struct Node* root = new Node(1);
	root->left=new Node(2);
	root->right=new Node(3);
	root->left->left=new Node(4);
	root->left->right=new Node(5);
	root->right->left= new Node(6);
	root->right->right=new Node(7);
	
	 
	 if(balancedbtree(root)==true){
	     cout<<"Balanced Tree"<<endl;
	 }
	 else{
	     cout<<"unbalanced tree"<<endl;
	 }

	
	return 0;
}
