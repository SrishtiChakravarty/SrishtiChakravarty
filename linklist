#include <iostream>
using namespace std;

class node{
    public:
    int data;
    node* next;
    
    node(int value){
        data=value;
        next=NULL;
    }
};

void insertattail(node* &head,int value){
    node *n = new node(value);
    
    if(head==NULL){
        head=n;
        return;
    }
    
    node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
        
    }
    temp->next=n;
    
}

void display(node* head){
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
        
    }cout<<endl;
}

int main() {
	node* head=NULL;
	insertattail(head,1);
	insertattail(head,2);
	insertattail(head,3);
	display(head);
	return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------
Insert At Head 

#include <iostream>
using namespace std;

class node{
    public:
    int data;
    node* next;
    
    node(int value){
        data=value;
        next=NULL;
    }
};

void insertathead(node* &head,int value){
    node *n=new node(value);
    n->next=head;
    head=n;
    
}

void insertattail(node* &head,int value){
    node *n = new node(value);
    
    if(head==NULL){
        head=n;
        return;
    }
    
    node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
        
    }
    temp->next=n;
    
}

void display(node* head){
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
        
    }cout<<endl;
}

int main() {
	node* head=NULL;
	insertattail(head,1);
	insertattail(head,2);
	insertattail(head,3);
	display(head);

	insertathead(head,4);
	display(head);
		return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
searching 
#include <iostream>
using namespace std;

class node{
    public:
    int data;
    node* next;
    
    node(int value){
        data=value;
        next=NULL;
    }
};

void insertathead(node* &head,int value){
    node *n=new node(value);
    n->next=head;
    head=n;
    
}

void insertattail(node* &head,int value){
    node *n = new node(value);
    
    if(head==NULL){
        head=n;
        return;
    }
    
    node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
        
    }
    temp->next=n;
    
}

void display(node* head){
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
        
    }cout<<endl;
}

bool seach(node* head,int key){
    node* temp=head;
    while(temp!=NULL){
        if(temp->data==key){
            return true;
        }
        temp=temp->next;
        
    }
    return false;
}



int main() {
	node* head=NULL;
	insertattail(head,1);
	insertattail(head,2);
	insertattail(head,3);
	display(head);

	insertathead(head,4);
	display(head);
	cout<<seach(head,5)<<endl;
	cout<<seach(head,3)<<endl;
		return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
void delet(node* &head,int val){
 
 if(head==NULL){
 return;
 }
 
 if(head->next==NULL){
 deleteathead(head);
 }
 
    node* temp= head;
    while(temp->next->data!=val){
        temp= temp->next;
        
    }
    node* todelete=temp->next;
    temp->next=temp->next->next;
    delete todelete;
    
}

deletion 
-----------------------------------------------------------------------------------------------------------------------------------------------
void deleteathead(node* head){
   node* todelete=head;
   head=head->next;
   
   delete todelete;
   
    
}
delete at head 
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Reverse A LINK LIST
ITERATIVE METHOD 
RECURSIVE METHOD



ITERATIVE METHOD 
#include <iostream>
using namespace std;

class node{
    public:
    int data;
    node* next;
    
    node(int value){
        data=value;
        next=NULL;
    }
};

void insertathead(node* &head,int value){
    node *n=new node(value);
    n->next=head;
    head=n;
    
}

void insertattail(node* &head,int value){
    node *n = new node(value);
    
    if(head==NULL){
        head=n;
        return;
    }
    
    node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
        
    }
    temp->next=n;
    
}

void display(node* head){
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
        
    }cout<<endl;
}

bool seach(node* head,int key){
    node* temp=head;
    while(temp!=NULL){
        if(temp->data==key){
            return true;
        }
        temp=temp->next;
        
    }
    return false;
}

node* reverselinklist(node* &head){
    node* prevptr=NULL;
    node* currptr=head;
    node* nextptr;
    
    while(currptr!=NULL){
        nextptr=currptr->next;
        currptr->next=prevptr;
        
        prevptr=currptr;
        currptr=nextptr;
    }
    return prevptr;
}




int main() {
	node* head=NULL;
	insertattail(head,1);
	insertattail(head,2);
	insertattail(head,3);
	display(head);

	node* newhead=reverselinklist(head);
	display(newhead);
	return 0;
}
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Recursive Method 
#include <iostream>
using namespace std;


#include <iostream>
using namespace std;

class node{
    public:
    int data;
    node* next;
    
    node(int value){
        data=value;
        next=NULL;
    }
};

void insertathead(node* &head,int value){
    node *n=new node(value);
    n->next=head;
    head=n;
    
}

void insertattail(node* &head,int value){
    node *n = new node(value);
    
    if(head==NULL){
        head=n;
        return;
    }
    
    node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
        
    }
    temp->next=n;
    
}

void display(node* head){
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
        
    }cout<<endl;
}

bool seach(node* head,int key){
    node* temp=head;
    while(temp!=NULL){
        if(temp->data==key){
            return true;
        }
        temp=temp->next;
        
    }
    return false;
}

node* reverselinklist(node* &head){
    node* prevptr=NULL;
    node* currptr=head;
    node* nextptr;
    
    while(currptr!=NULL){
        nextptr=currptr->next;
        currptr->next=prevptr;
        
        prevptr=currptr;
        currptr=nextptr;
    }
    return prevptr;
}

node* reverserecursive(node* &head){
    
    
    if(head==NULL || head->next==NULL){
        return head;
    }
    node* newhead=reverserecursive(head->next);
    head->next->next=head;
    head->next=NULL;
    
    return newhead;
}

    node* reversek(node* &head, int k){
        node* prevptr=NULL;
        node* currptr=head;
        node* nextptr;
        
        
        int count=0;
        
        while(currptr!=NULL && count<k){
            nextptr=currptr->next;
            currptr->next=prevptr;
            prevptr=currptr;
            currptr=nextptr;
            count++;
            
        }
        
        if(nextptr!=NULL){
        head->next =reversek(nextptr, k);
        }
        
        return prevptr;
        
        
    }


int main() {
	node* head=NULL;
	insertattail(head,1);
	insertattail(head,2);
	insertattail(head,3);
	display(head);

	
	int k=2;
	node* newhead=reversek(head,k);
	display(newhead);
	
	return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------


class node{
    public:
    int data;
    node* next;
    
    node(int value){
        data=value;
        next=NULL;
    }
};

void insertathead(node* &head,int value){
    node *n=new node(value);
    n->next=head;
    head=n;
    
}

void insertattail(node* &head,int value){
    node *n = new node(value);
    
    if(head==NULL){
        head=n;
        return;
    }
    
    node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
        
    }
    temp->next=n;
    
}

void display(node* head){
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
        
    }cout<<endl;
}

bool seach(node* head,int key){
    node* temp=head;
    while(temp!=NULL){
        if(temp->data==key){
            return true;
        }
        temp=temp->next;
        
    }
    return false;
}

node* reverselinklist(node* &head){
    node* prevptr=NULL;
    node* currptr=head;
    node* nextptr;
    
    while(currptr!=NULL){
        nextptr=currptr->next;
        currptr->next=prevptr;
        
        prevptr=currptr;
        currptr=nextptr;
    }
    return prevptr;
}

node* reverserecursive(node* &head){
    
    
    if(head==NULL || head->next==NULL){
        return head;
    }
    node* newhead=reverserecursive(head->next);
    head->next->next=head;
    head->next=NULL;
    
    return newhead;
}



int main() {
	node* head=NULL;
	insertattail(head,1);
	insertattail(head,2);
	insertattail(head,3);
	display(head);

	node* newhead=reverserecursive(head);
	display(newhead);
	
	return 0;
}

tc- o(n)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------




