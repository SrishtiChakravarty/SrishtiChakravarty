#include <iostream>
#include <vector>
#include <bits/stdc++.h>

using namespace std;

struct Node{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int val){
        data= val;
        left=NULL;
        right=NULL;
    }
};



bool getpath(Node* root,int key,std::vector<int> &path){
    
    if(root==NULL){
        return NULL;
        
    }
    
    path.push_back(root->data);
    if(root->data==key){
        return true;
    }
    
    if((getpath(root->left,key,path)) || (getpath(root->right,key,path))){
        return true;
    }
    
    path.pop_back();
    return false;
}
    







int Lca(Node* root, int n1, int n2){
    
    
    std::vector<int> path1, path2;
    if(!(getpath(root, n1,path1))  || !(getpath(root, n1,path1))){
        return -1;
    }
    
    int pc;
    for(pc=0;pc<path1.size() && path2.size();pc++){
        if(path1[pc]!=path2[pc]){
            break;
        }
    }
    return path1[pc-1];
}


Node* LCA2(Node* root, int n1, int n2){
    
    if(root==NULL){
        return NULL;
    }
    
    
    if(root->data==n1 || root->data ==n2){
        return root;
    }
    
    Node* leftLCA=LCA2(root->left,n1, n2);
    Node* rightLCA=LCA2(root->right, n1,n2);
    
    if(leftLCA && rightLCA){
        return root;
    }
    
    if(leftLCA!=NULL){
        return leftLCA;
    }
    
    return rightLCA;
}





int main() {
	struct Node* root = new Node(1);
	root->left=new Node(2);
	root->right=new Node(3);
	root->left->left=new Node(4);
	root->left->right=new Node(5);
	root->right->left= new Node(6);
	root->right->right=new Node(7);
	
	
	int n1=7;
	int n2=6;
 
 //int lca=Lca(root,n1,n2);
 
   Node* lca=LCA2(root,n1,n2);
   
   
    //cout<<Lca<<endl;
    
    if(LCA2==NULL){
        cout<<"LCA DOESNT EXSIST"<<endl;
    }
    else{
        cout<<LCA2<<lca->data;
        
        
    }
   
   
   

	return 0;
}
